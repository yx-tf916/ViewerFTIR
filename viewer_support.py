#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Feb 14, 2025 04:44:01 PM PST  platform: Windows NT

import os

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import viewer

import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

_debug = True # False to eliminate debug printing from callback functions.

# viewer_support.py

import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from viewer import Toplevel1

# Global variable to store the loaded spectra data
spectra_data = None
app = None
file_paths = []
background_spectrum = None
background_file = None
primary_spectrum = None
primary_file = None
update_pending = False
displayed_data = None

def set_as_background():
    global background_spectrum, background_file
    selected_indices = app.Listbox1.curselection()
    if not selected_indices:
        messagebox.showerror("Error", "No items selected to set as background.")
        return

    # Set the first selected item as the background
    index = selected_indices[0]
    file_name = app.Listbox1.get(index)
    file_path = next((fp for fp in file_paths if os.path.basename(fp) == file_name), None)

    if file_path:
        try:
            data = pd.read_csv(file_path)
            if "Wavenumber (cm-1)" in data.columns and "Epsilon" in data.columns:
                background_spectrum = data
                background_file = file_name

                app.Listbox1.delete(index)
                app.Listbox1.insert(index, f"{file_name} -")
                
                # messagebox.showinfo("Success", f"Background set to '{file_name}'")
            else:
                messagebox.showerror("Error", f"CSV file '{file_name}' does not contain the required columns")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to read CSV file '{file_name}': {e}")

def unset_as_background():
    global background_spectrum, background_file
    if background_spectrum is not None:
        index = app.Listbox1.get(0, tk.END).index(f"{background_file} -")
        app.Listbox1.delete(index)
        app.Listbox1.insert(index, background_file)
        
        background_spectrum = None
        background_file = None
        # messagebox.showinfo("Success", "Background unset.")
    else:
        messagebox.showerror("Error", "No background is currently set.")


def set_as_primary():
    global primary_spectrum, primary_file
    selected_indices = app.Listbox1.curselection()
    if not selected_indices:
        messagebox.showerror("Error", "No items selected to set as primary.")
        return

    index = selected_indices[0]
    file_name = app.Listbox1.get(index)
    file_path = next((fp for fp in file_paths if os.path.basename(fp) == file_name), None)

    if file_path:
        try:
            data = pd.read_csv(file_path)
            if "Wavenumber (cm-1)" in data.columns and "Epsilon" in data.columns:
                primary_spectrum = data
                primary_file = file_name

                app.Listbox1.delete(index)
                app.Listbox1.insert(index, f"{file_name} +")
                
                # messagebox.showinfo("Success", f"Primary spectrum set to '{file_name}'")
            else:
                messagebox.showerror("Error", f"CSV file '{file_name}' does not contain the required columns")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to read CSV file '{file_name}': {e}")


def unset_as_primary():
    global primary_spectrum, primary_file
    if primary_spectrum is not None:
        index = app.Listbox1.get(0, tk.END).index(f"{primary_file} +")
        app.Listbox1.delete(index)
        app.Listbox1.insert(index, primary_file)
        
        primary_spectrum = None
        primary_file = None
        # messagebox.showinfo("Success", "Primary spectrum unset.")
    else:
        messagebox.showerror("Error", "No primary spectrum is currently set.")


def subtract():
    global primary_spectrum, primary_file, background_spectrum, background_file, displayed_data
    if primary_spectrum is None or background_spectrum is None:
        messagebox.showerror("Error", "Both primary and background spectra must be set for subtraction.")
        return

    primary_name = primary_file if primary_file[-2:] != " +" else primary_file[:-2]
    background_name = background_file if background_file[-2:] != " -" else background_file[:-2]

    if primary_name == background_name:
        messagebox.showerror("Error", "Primary and background spectra cannot be the same.")
        return

    fig, ax = plt.subplots()
    try:
        subtracted_data = primary_spectrum.copy()
        subtracted_data["Epsilon"] -= background_spectrum["Epsilon"]

        displayed_data = subtracted_data  # Store the subtracted data for zooming
        print(displayed_data)
        # subtracted_file_name = f"{primary_name} - {background_name}"
        # app.Listbox1.insert(tk.END, subtracted_file_name)
        
        ax.plot(subtracted_data["Wavenumber (cm-1)"], subtracted_data["Epsilon"], label=f"{primary_name} - {background_name}")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to subtract spectra: {e}")
        return

    ax.set_xlabel("Wavenumber (cm-1)")
    ax.set_ylabel("Epsilon")
    ax.set_title("Subtracted Spectrum")
    ax.legend()

    # Clear the previous plot
    for widget in app.Canvas1.winfo_children():
        widget.destroy()

    canvas = FigureCanvasTkAgg(fig, master=app.Canvas1)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

    plt.close(fig)

        
def get_spectra():
    global spectra_data, file_paths
    file_paths = filedialog.askopenfilenames(filetypes=[("CSV files", "*.csv")])  # Allow multiple file selections
    if file_paths:
        spectra_data = pd.DataFrame()
        for file_path in file_paths:  # Iterate through each selected file
            try:
                data = pd.read_csv(file_path)
                if "Wavenumber (cm-1)" in data.columns and "Epsilon" in data.columns:
                # if "Wavenumber (cm-1)" in data.columns and "Absorbance" in data.columns:
                    spectra_data = pd.concat([spectra_data, data])  # Concatenate data from multiple files
                    print(data.head())  # Print the first few rows of the dataframe
                    app.Listbox1.insert(tk.END, os.path.basename(file_path))  # Add file name to listbox
                else:
                    messagebox.showerror("Error", f"CSV file '{os.path.basename(file_path)}' does not contain the required columns")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to read CSV file '{os.path.basename(file_path)}': {e}")
        # messagebox.showinfo("Success", "CSV files loaded successfully")
    else:
        spectra_data = None  # Reset spectra_data if no files are selected
        
def plot():
    global spectra_data, file_paths
    selected_indices = app.Listbox1.curselection()  # Get selected indices
    if selected_indices:
        left_limit = app.TScale1.get()
        right_limit = app.TScale2.get()

        if left_limit >= right_limit:
            messagebox.showerror("Error", "The second slider must be to the right of the first slider")
            return  # Stop updating the plot if the second slider is not to the right of the first slider


        
        fig, ax = plt.subplots()
        
        for index in selected_indices:
            file_name = app.Listbox1.get(index)
            file_path = next((fp for fp in file_paths if os.path.basename(fp) == file_name), None)
            
            if file_path:
                try:
                    data = pd.read_csv(file_path)
                    if "Wavenumber (cm-1)" in data.columns and "Epsilon" in data.columns:                        
                        ax.plot(data["Wavenumber (cm-1)"], data["Epsilon"], label=file_name)
                    else:
                        messagebox.showerror("Error", f"CSV file '{file_name}' does not contain the required columns")
                except Exception as e:
                    messagebox.showerror("Error", f"Failed to read CSV file '{file_name}': {e}")

        ax.set_xlabel("Wavenumber (cm-1)")
        ax.set_ylabel("Epsilon")
        ax.set_title("FTIR Spectra")
        ax.legend()

        # Clear the previous plot
        for widget in app.Canvas1.winfo_children():
            widget.destroy()

        canvas = FigureCanvasTkAgg(fig, master=app.Canvas1)
        canvas.draw()
        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        # Close the figure to free up memory
        plt.close(fig)
    else:
        messagebox.showerror("Error", "No spectra data selected to plot. Please highlight items in the listbox.")

def on_listbox_select(event):
    # Get the selected file from the listbox
    selection = event.widget.curselection()
    if selection:
        index = selection[0]
        file_name = event.widget.get(index)
        file_path = next((fp for fp in file_paths if os.path.basename(fp) == file_name), None)
        
        if file_path:
            try:
                data = pd.read_csv(file_path)
                if "Wavenumber (cm-1)" in data.columns and "Epsilon" in data.columns:
                    fig, ax = plt.subplots()
                    ax.plot(data["Wavenumber (cm-1)"], data["Epsilon"])
                    ax.set_xlabel("Wavenumber (cm-1)")
                    ax.set_ylabel("Epsilon")
                    ax.set_title(f"FTIR Spectra - {file_name}")

                    # Clear the previous plot
                    for widget in app.Canvas1.winfo_children():
                        widget.destroy()

                    canvas = FigureCanvasTkAgg(fig, master=app.Canvas1)
                    canvas.draw()
                    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
                else:
                    messagebox.showerror("Error", f"CSV file '{file_name}' does not contain the required columns")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to read CSV file '{file_name}': {e}")
        else:
            messagebox.showerror("Error", f"File path for '{file_name}' not found")        

def clear_plot():
    for widget in app.Canvas1.winfo_children():
        widget.destroy()

    # Clear the selection in Listbox1
    app.Listbox1.selection_clear(0, tk.END)

    
def update_plot_range(event=None):
    global displayed_data
    if displayed_data is not None:
        left_limit = app.TScale1.get()
        right_limit = app.TScale2.get()

        if left_limit >= right_limit:
            return  # Stop updating the plot if the second slider is not to the right of the first slider

        fig, ax = plt.subplots()
        
        # Filter data based on slider values
        min_wavenumber = displayed_data["Wavenumber (cm-1)"].min()
        max_wavenumber = displayed_data["Wavenumber (cm-1)"].max()
        lower_bound = min_wavenumber + (max_wavenumber - min_wavenumber) * left_limit
        upper_bound = min_wavenumber + (max_wavenumber - min_wavenumber) * right_limit
        filtered_data = displayed_data[(displayed_data["Wavenumber (cm-1)"] >= lower_bound) & (displayed_data["Wavenumber (cm-1)"] <= upper_bound)]
        
        ax.plot(filtered_data["Wavenumber (cm-1)"], filtered_data["Epsilon"], label="Displayed Data")
        ax.set_xlabel("Wavenumber (cm-1)")
        ax.set_ylabel("Epsilon")
        ax.set_title("Zoomed Spectrum")
        ax.legend()

        # Clear the previous plot
        for widget in app.Canvas1.winfo_children():
            widget.destroy()

        canvas = FigureCanvasTkAgg(fig, master=app.Canvas1)
        canvas.draw()
        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        plt.close(fig)
    else:
        print("> cannot find displayed data!")
    
def remove_selected():
    # Get selected items to remove
    selected_indices = app.Listbox1.curselection()
    if not selected_indices:
        messagebox.showerror("Error", "No items selected to remove.")
        return

    # Remove items from the end to avoid reindexing issues
    for index in reversed(selected_indices):
        app.Listbox1.delete(index)
        del file_paths[index]  # Remove the corresponding file path


def cancel_subtraction():
    global primary_spectrum, primary_file, background_spectrum, background_file
    
    # Clear primary selection
    if primary_spectrum is not None:
        index = app.Listbox1.get(0, tk.END).index(f"{primary_file} +")
        app.Listbox1.delete(index)
        app.Listbox1.insert(index, primary_file)
        primary_spectrum = None
        primary_file = None

    # Clear background selection
    if background_spectrum is not None:
        index = app.Listbox1.get(0, tk.END).index(f"{background_file} -")
        app.Listbox1.delete(index)
        app.Listbox1.insert(index, background_file)
        background_spectrum = None
        background_file = None

    # Clear displayed data
    displayed_data = None
        
    # Clear the plot
    for widget in app.Canvas1.winfo_children():
        widget.destroy()

    messagebox.showinfo("Success", "Cancelled all background subtractions.")        


def on_listbox_double_click(event):
    global app
    selection = event.widget.curselection()
    if selection:
        index = selection[0]
        file_name = event.widget.get(index)
        file_path = next((fp for fp in file_paths if os.path.basename(fp) == file_name), None)
        
        if file_path:
            try:
                data = pd.read_csv(file_path)
                if "Wavenumber (cm-1)" in data.columns and "Epsilon" in data.columns:
                    # Clear previous data in Treeview
                    for item in app.tree.get_children():
                        app.tree.delete(item)

                    # Insert new data into Treeview
                    for _, row in data.iterrows():
                        app.tree.insert("", "end", values=(row["Wavenumber (cm-1)"], row["Epsilon"]))
                else:
                    messagebox.showerror("Error", f"CSV file '{file_name}' does not contain the required columns")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to read CSV file '{file_name}': {e}")
        else:
            messagebox.showerror("Error", f"File path for '{file_name}' not found")

    
# ---------------------------------------------- #

        
def main():
    global root, app
    root = tk.Tk()
    app = Toplevel1(root)
    root.mainloop()
